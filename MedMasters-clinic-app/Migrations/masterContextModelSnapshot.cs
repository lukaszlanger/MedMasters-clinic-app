// <auto-generated />
using System;
using Klinika.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Klinika.Migrations
{
    [DbContext(typeof(masterContext))]
    partial class masterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Klinika.Models.DoctorSpecializations", b =>
                {
                    b.Property<int>("IdDoctorSpecialization")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdDoctor_specialization")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DoctorId")
                        .HasColumnName("Doctor_id")
                        .HasColumnType("int");

                    b.Property<int>("SpecializationId")
                        .HasColumnName("Specialization_id")
                        .HasColumnType("int");

                    b.HasKey("IdDoctorSpecialization");

                    b.HasIndex("DoctorId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Doctor_specializations");
                });

            modelBuilder.Entity("Klinika.Models.DoctorsReferals", b =>
                {
                    b.Property<int>("IdReferal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnName("Date_of_issue")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDay")
                        .HasColumnName("Expiration_day")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitId")
                        .HasColumnName("Visit_id")
                        .HasColumnType("int");

                    b.HasKey("IdReferal");

                    b.HasIndex("VisitId");

                    b.ToTable("Doctors_referals");
                });

            modelBuilder.Entity("Klinika.Models.MedicalSpecializations", b =>
                {
                    b.Property<int>("IdSpecialization")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SpecializationName")
                        .HasColumnName("Specialization_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSpecialization");

                    b.ToTable("Medical_specializations");
                });

            modelBuilder.Entity("Klinika.Models.Medicines", b =>
                {
                    b.Property<int>("IdMedicine")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnName("Date_of_issue")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDay")
                        .HasColumnName("Expiration_day")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicineName")
                        .HasColumnName("Medicine_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitId")
                        .HasColumnName("Visit_id")
                        .HasColumnType("int");

                    b.HasKey("IdMedicine");

                    b.HasIndex("VisitId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("Klinika.Models.Patients", b =>
                {
                    b.Property<string>("Pesel")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BuildingNumber")
                        .HasColumnName("Building_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityOfBirth")
                        .HasColumnName("City_of_birth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnName("Date_of_birth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfDeath")
                        .HasColumnName("Date_of_death")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlatNumber")
                        .HasColumnName("Flat_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Forename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaidenName")
                        .HasColumnName("Maiden_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("Phone_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondForename")
                        .HasColumnName("Second_forename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pesel");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Klinika.Models.Roles", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .HasColumnName("Role_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRole");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Klinika.Models.Visits", b =>
                {
                    b.Property<int>("IdVisit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Compleated")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnName("Doctor_id")
                        .HasColumnType("int");

                    b.Property<string>("PatientId")
                        .HasColumnName("Patient_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VisitsDescription")
                        .HasColumnName("Visits_description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdVisit");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("Klinika.Models.Workers", b =>
                {
                    b.Property<int>("IdWorker")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Forename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnName("Role_id")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdWorker");

                    b.HasIndex("RoleId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Klinika.Models.WorkingDays", b =>
                {
                    b.Property<int>("IdWorkingDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnName("Time_end")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnName("Time_start")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkerId")
                        .HasColumnName("Worker_id")
                        .HasColumnType("int");

                    b.HasKey("IdWorkingDay");

                    b.HasIndex("WorkerId");

                    b.ToTable("Working_days");
                });

            modelBuilder.Entity("Klinika.Models.DoctorSpecializations", b =>
                {
                    b.HasOne("Klinika.Models.Workers", "Doctor")
                        .WithMany("DoctorSpecializations")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Klinika.Models.MedicalSpecializations", "Specialization")
                        .WithMany("DoctorSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Klinika.Models.DoctorsReferals", b =>
                {
                    b.HasOne("Klinika.Models.Visits", "Visit")
                        .WithMany("DoctorsReferals")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Klinika.Models.Medicines", b =>
                {
                    b.HasOne("Klinika.Models.Visits", "Visit")
                        .WithMany("Medicines")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Klinika.Models.Visits", b =>
                {
                    b.HasOne("Klinika.Models.Workers", "Doctor")
                        .WithMany("Visits")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Klinika.Models.Patients", "Patient")
                        .WithMany("Visits")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("Klinika.Models.Workers", b =>
                {
                    b.HasOne("Klinika.Models.Roles", "Role")
                        .WithMany("Workers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Klinika.Models.WorkingDays", b =>
                {
                    b.HasOne("Klinika.Models.Workers", "Worker")
                        .WithMany("WorkingDays")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
